generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  widgets       Widget[]
  xeroTokens    XeroToken[]
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  widgets   Widget[]

  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String?
  parts          Json?
  json           Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Widget {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  title          String
  type           String
  data           Json?
  x              Int          @default(0)
  y              Int          @default(0)
  w              Int          @default(1)
  h              Int          @default(1)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([conversationId])
}

model SystemSettings {
  id           String   @id @default(cuid())
  systemPrompt String   @default("You are a helpful AI assistant powered by Claude. You are knowledgeable, friendly, and provide accurate information. Feel free to ask follow-up questions to better understand what the user needs.")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("system_settings")
}

model XeroToken {
  id                      String    @id @default(cuid())
  userId                  String
  tenantId                String    // Xero tenant ID
  accessToken             String    @map("access_token") @db.Text
  refreshToken            String    @map("refresh_token") @db.Text
  idToken                 String?   @map("id_token") @db.Text
  expiresIn               Int       @map("expires_in")
  tokenType               String    @default("Bearer") @map("token_type")
  scope                   String?
  accessTokenExpiresAt    DateTime  @map("access_token_expires_at")
  refreshTokenExpiresAt   DateTime? @map("refresh_token_expires_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([accessTokenExpiresAt])
  @@map("xero_tokens")
}
